fn get_ijk_list(m: u8) -> Vec<[u8; 3]> {
    let mut l = Vec::new();
    for a in 1..(m + 2) {
        for b in 1..(a + 1) {
            let i = m + 1 - a;
            let j = a - b;
            let k = b - 1;
            l.push([i, j, k]);
        }
    }
    l
}

fn get_shell4(a: u8, b: u8, c: u8, d: u8) -> Vec<[u8; 12]> {
    let mut components = Vec::new();
    for p in get_ijk_list(a) {
        for q in get_ijk_list(b) {
            for r in get_ijk_list(c) {
                for s in get_ijk_list(d) {
                    components.push([
                        p[0], p[1], p[2], q[0], q[1], q[2], r[0], r[1], r[2], s[0], s[1], s[2],
                    ]);
                }
            }
        }
    }
    components
}

fn get_shell2(a: u8, b: u8) -> Vec<[u8; 6]> {
    let mut components = Vec::new();
    for p in get_ijk_list(a) {
        for q in get_ijk_list(b) {
            components.push([p[0], p[1], p[2], q[0], q[1], q[2]]);
        }
    }
    components
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_get_ijk_list() {
        assert_eq!(
            get_ijk_list(3),
            vec![
                [3, 0, 0],
                [2, 1, 0],
                [2, 0, 1],
                [1, 2, 0],
                [1, 1, 1],
                [1, 0, 2],
                [0, 3, 0],
                [0, 2, 1],
                [0, 1, 2],
                [0, 0, 3]
            ]
        );
    }

    #[test]
    fn test_get_shell4() {
        assert_eq!(
            get_shell4(2, 0, 0, 1),
            vec![
                [2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                [1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                [0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                [0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                [0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1]
            ]
        );
    }

    #[test]
    fn test_get_shell2() {
        assert_eq!(
            get_shell2(3, 1),
            vec![
                [3, 0, 0, 1, 0, 0],
                [3, 0, 0, 0, 1, 0],
                [3, 0, 0, 0, 0, 1],
                [2, 1, 0, 1, 0, 0],
                [2, 1, 0, 0, 1, 0],
                [2, 1, 0, 0, 0, 1],
                [2, 0, 1, 1, 0, 0],
                [2, 0, 1, 0, 1, 0],
                [2, 0, 1, 0, 0, 1],
                [1, 2, 0, 1, 0, 0],
                [1, 2, 0, 0, 1, 0],
                [1, 2, 0, 0, 0, 1],
                [1, 1, 1, 1, 0, 0],
                [1, 1, 1, 0, 1, 0],
                [1, 1, 1, 0, 0, 1],
                [1, 0, 2, 1, 0, 0],
                [1, 0, 2, 0, 1, 0],
                [1, 0, 2, 0, 0, 1],
                [0, 3, 0, 1, 0, 0],
                [0, 3, 0, 0, 1, 0],
                [0, 3, 0, 0, 0, 1],
                [0, 2, 1, 1, 0, 0],
                [0, 2, 1, 0, 1, 0],
                [0, 2, 1, 0, 0, 1],
                [0, 1, 2, 1, 0, 0],
                [0, 1, 2, 0, 1, 0],
                [0, 1, 2, 0, 0, 1],
                [0, 0, 3, 1, 0, 0],
                [0, 0, 3, 0, 1, 0],
                [0, 0, 3, 0, 0, 1]
            ]
        );
    }
}
